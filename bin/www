#!/usr/bin/env node

/**
 * Module dependencies.
 */

import app from '../app.js';
import debug from 'debug';
import fs from 'fs';
import http from 'http';
import { join } from 'path';
import { utilsPort } from '../lib/arguments.js';
import { rollup } from 'rollup';
import resolve from '@rollup/plugin-node-resolve';
import { startWatchServer } from '../lib/websocket.js';
import { dirname } from '../lib/functions.js';


// Bundle the Edit JS
const bundle = await rollup({
    input: join(
        dirname(import.meta),
        '../public/modules/edit.js'
    ),
    plugins: [resolve()]
});
const { output } = await bundle.generate({ format: 'iife' });
if (bundle) {
    // closes the bundle
    await bundle.close();
}

fs.writeFileSync(
    join(
        dirname(import.meta),
        '../public/modules/edit.bundle.js'
    ),
    output[0].code
);

debug('highcharts-utils:server');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || utilsPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

startWatchServer(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
