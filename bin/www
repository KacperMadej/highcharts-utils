#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('highcharts-utils:server');
var http = require('http');
const { utilsPort } = require('../lib/arguments.js');
const { startWatchServer } = require('../lib/websocket');

/*
const { rollup } = require('rollup');
const { loadConfigFile } = require('rollup/loadConfigFile');
const path = require('path');

(async () => {
    try {
        // Path to the Rollup config file
        const configPath = path.resolve('../rollup.config.mjs');

        // Load the config file
        const { options, warnings } = await loadConfigFile(configPath);

        // Handle any warnings from the config
        warnings.flush();

        // Loop through all the options and build
        for (const optionsObject of options) {
            console.log(optionsObject)
            const bundle = await rollup(optionsObject);

            for (const output of optionsObject.output) {
                await bundle.write(output);
            }

            console.log(`Built successfully: ${optionsObject.output.map(o => o.file || o.dir).join(', ')}`);
        }
    } catch (error) {
        console.error('Rollup build failed:', error);
        process.exit(1);
    }
})();
*/

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || utilsPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

startWatchServer(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
